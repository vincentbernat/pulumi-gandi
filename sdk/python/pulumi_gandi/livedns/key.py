# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['KeyArgs', 'Key']

@pulumi.input_type
class KeyArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str]):
        """
        The set of arguments for constructing a Key resource.
        :param pulumi.Input[str] domain: Domain name
        """
        pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        Domain name
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)


@pulumi.input_type
class _KeyState:
    def __init__(__self__, *,
                 algorithm: Optional[pulumi.Input[int]] = None,
                 algorithm_name: Optional[pulumi.Input[str]] = None,
                 deleted: Optional[pulumi.Input[bool]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 ds: Optional[pulumi.Input[str]] = None,
                 flags: Optional[pulumi.Input[int]] = None,
                 public_key: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Key resources.
        :param pulumi.Input[int] algorithm: DNSSEC algorithm type
        :param pulumi.Input[str] algorithm_name: DNSSEC algorithm name
        :param pulumi.Input[bool] deleted: Is the key deleted?
        :param pulumi.Input[str] domain: Domain name
        :param pulumi.Input[str] ds: DS record as RFC1035 line
        :param pulumi.Input[int] flags: DNSSEC key flags
        :param pulumi.Input[str] public_key: Public key
        :param pulumi.Input[str] status: Current status of the key
        :param pulumi.Input[int] tag: Tag
        """
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if algorithm_name is not None:
            pulumi.set(__self__, "algorithm_name", algorithm_name)
        if deleted is not None:
            pulumi.set(__self__, "deleted", deleted)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if ds is not None:
            pulumi.set(__self__, "ds", ds)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[pulumi.Input[int]]:
        """
        DNSSEC algorithm type
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter(name="algorithmName")
    def algorithm_name(self) -> Optional[pulumi.Input[str]]:
        """
        DNSSEC algorithm name
        """
        return pulumi.get(self, "algorithm_name")

    @algorithm_name.setter
    def algorithm_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "algorithm_name", value)

    @property
    @pulumi.getter
    def deleted(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the key deleted?
        """
        return pulumi.get(self, "deleted")

    @deleted.setter
    def deleted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deleted", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def ds(self) -> Optional[pulumi.Input[str]]:
        """
        DS record as RFC1035 line
        """
        return pulumi.get(self, "ds")

    @ds.setter
    def ds(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ds", value)

    @property
    @pulumi.getter
    def flags(self) -> Optional[pulumi.Input[int]]:
        """
        DNSSEC key flags
        """
        return pulumi.get(self, "flags")

    @flags.setter
    def flags(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flags", value)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[pulumi.Input[str]]:
        """
        Public key
        """
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_key", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Current status of the key
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[int]]:
        """
        Tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tag", value)


class Key(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Key resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] domain: Domain name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KeyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Key resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param KeyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KeyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KeyArgs.__new__(KeyArgs)

            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            __props__.__dict__["algorithm"] = None
            __props__.__dict__["algorithm_name"] = None
            __props__.__dict__["deleted"] = None
            __props__.__dict__["ds"] = None
            __props__.__dict__["flags"] = None
            __props__.__dict__["public_key"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["tag"] = None
        super(Key, __self__).__init__(
            'gandi:livedns/key:Key',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            algorithm: Optional[pulumi.Input[int]] = None,
            algorithm_name: Optional[pulumi.Input[str]] = None,
            deleted: Optional[pulumi.Input[bool]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            ds: Optional[pulumi.Input[str]] = None,
            flags: Optional[pulumi.Input[int]] = None,
            public_key: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tag: Optional[pulumi.Input[int]] = None) -> 'Key':
        """
        Get an existing Key resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] algorithm: DNSSEC algorithm type
        :param pulumi.Input[str] algorithm_name: DNSSEC algorithm name
        :param pulumi.Input[bool] deleted: Is the key deleted?
        :param pulumi.Input[str] domain: Domain name
        :param pulumi.Input[str] ds: DS record as RFC1035 line
        :param pulumi.Input[int] flags: DNSSEC key flags
        :param pulumi.Input[str] public_key: Public key
        :param pulumi.Input[str] status: Current status of the key
        :param pulumi.Input[int] tag: Tag
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KeyState.__new__(_KeyState)

        __props__.__dict__["algorithm"] = algorithm
        __props__.__dict__["algorithm_name"] = algorithm_name
        __props__.__dict__["deleted"] = deleted
        __props__.__dict__["domain"] = domain
        __props__.__dict__["ds"] = ds
        __props__.__dict__["flags"] = flags
        __props__.__dict__["public_key"] = public_key
        __props__.__dict__["status"] = status
        __props__.__dict__["tag"] = tag
        return Key(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def algorithm(self) -> pulumi.Output[int]:
        """
        DNSSEC algorithm type
        """
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="algorithmName")
    def algorithm_name(self) -> pulumi.Output[str]:
        """
        DNSSEC algorithm name
        """
        return pulumi.get(self, "algorithm_name")

    @property
    @pulumi.getter
    def deleted(self) -> pulumi.Output[bool]:
        """
        Is the key deleted?
        """
        return pulumi.get(self, "deleted")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        Domain name
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def ds(self) -> pulumi.Output[str]:
        """
        DS record as RFC1035 line
        """
        return pulumi.get(self, "ds")

    @property
    @pulumi.getter
    def flags(self) -> pulumi.Output[int]:
        """
        DNSSEC key flags
        """
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> pulumi.Output[str]:
        """
        Public key
        """
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Current status of the key
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> pulumi.Output[int]:
        """
        Tag
        """
        return pulumi.get(self, "tag")

