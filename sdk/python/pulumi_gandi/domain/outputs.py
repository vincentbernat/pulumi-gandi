# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'DomainAdmin',
    'DomainBilling',
    'DomainOwner',
    'DomainTech',
]

@pulumi.output_type
class DomainAdmin(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "familyName":
            suggest = "family_name"
        elif key == "givenName":
            suggest = "given_name"
        elif key == "streetAddr":
            suggest = "street_addr"
        elif key == "dataObfuscated":
            suggest = "data_obfuscated"
        elif key == "extraParameters":
            suggest = "extra_parameters"
        elif key == "mailObfuscated":
            suggest = "mail_obfuscated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainAdmin. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainAdmin.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainAdmin.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 city: str,
                 country: str,
                 email: str,
                 family_name: str,
                 given_name: str,
                 phone: str,
                 street_addr: str,
                 type: str,
                 zip: str,
                 data_obfuscated: Optional[bool] = None,
                 extra_parameters: Optional[Mapping[str, str]] = None,
                 mail_obfuscated: Optional[bool] = None,
                 organisation: Optional[str] = None,
                 state: Optional[str] = None):
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "family_name", family_name)
        pulumi.set(__self__, "given_name", given_name)
        pulumi.set(__self__, "phone", phone)
        pulumi.set(__self__, "street_addr", street_addr)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "zip", zip)
        if data_obfuscated is not None:
            pulumi.set(__self__, "data_obfuscated", data_obfuscated)
        if extra_parameters is not None:
            pulumi.set(__self__, "extra_parameters", extra_parameters)
        if mail_obfuscated is not None:
            pulumi.set(__self__, "mail_obfuscated", mail_obfuscated)
        if organisation is not None:
            pulumi.set(__self__, "organisation", organisation)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter
    def country(self) -> str:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="familyName")
    def family_name(self) -> str:
        return pulumi.get(self, "family_name")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> str:
        return pulumi.get(self, "given_name")

    @property
    @pulumi.getter
    def phone(self) -> str:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="streetAddr")
    def street_addr(self) -> str:
        return pulumi.get(self, "street_addr")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def zip(self) -> str:
        return pulumi.get(self, "zip")

    @property
    @pulumi.getter(name="dataObfuscated")
    def data_obfuscated(self) -> Optional[bool]:
        return pulumi.get(self, "data_obfuscated")

    @property
    @pulumi.getter(name="extraParameters")
    def extra_parameters(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "extra_parameters")

    @property
    @pulumi.getter(name="mailObfuscated")
    def mail_obfuscated(self) -> Optional[bool]:
        return pulumi.get(self, "mail_obfuscated")

    @property
    @pulumi.getter
    def organisation(self) -> Optional[str]:
        return pulumi.get(self, "organisation")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class DomainBilling(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "familyName":
            suggest = "family_name"
        elif key == "givenName":
            suggest = "given_name"
        elif key == "streetAddr":
            suggest = "street_addr"
        elif key == "dataObfuscated":
            suggest = "data_obfuscated"
        elif key == "extraParameters":
            suggest = "extra_parameters"
        elif key == "mailObfuscated":
            suggest = "mail_obfuscated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainBilling. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainBilling.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainBilling.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 city: str,
                 country: str,
                 email: str,
                 family_name: str,
                 given_name: str,
                 phone: str,
                 street_addr: str,
                 type: str,
                 zip: str,
                 data_obfuscated: Optional[bool] = None,
                 extra_parameters: Optional[Mapping[str, str]] = None,
                 mail_obfuscated: Optional[bool] = None,
                 organisation: Optional[str] = None,
                 state: Optional[str] = None):
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "family_name", family_name)
        pulumi.set(__self__, "given_name", given_name)
        pulumi.set(__self__, "phone", phone)
        pulumi.set(__self__, "street_addr", street_addr)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "zip", zip)
        if data_obfuscated is not None:
            pulumi.set(__self__, "data_obfuscated", data_obfuscated)
        if extra_parameters is not None:
            pulumi.set(__self__, "extra_parameters", extra_parameters)
        if mail_obfuscated is not None:
            pulumi.set(__self__, "mail_obfuscated", mail_obfuscated)
        if organisation is not None:
            pulumi.set(__self__, "organisation", organisation)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter
    def country(self) -> str:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="familyName")
    def family_name(self) -> str:
        return pulumi.get(self, "family_name")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> str:
        return pulumi.get(self, "given_name")

    @property
    @pulumi.getter
    def phone(self) -> str:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="streetAddr")
    def street_addr(self) -> str:
        return pulumi.get(self, "street_addr")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def zip(self) -> str:
        return pulumi.get(self, "zip")

    @property
    @pulumi.getter(name="dataObfuscated")
    def data_obfuscated(self) -> Optional[bool]:
        return pulumi.get(self, "data_obfuscated")

    @property
    @pulumi.getter(name="extraParameters")
    def extra_parameters(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "extra_parameters")

    @property
    @pulumi.getter(name="mailObfuscated")
    def mail_obfuscated(self) -> Optional[bool]:
        return pulumi.get(self, "mail_obfuscated")

    @property
    @pulumi.getter
    def organisation(self) -> Optional[str]:
        return pulumi.get(self, "organisation")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class DomainOwner(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "familyName":
            suggest = "family_name"
        elif key == "givenName":
            suggest = "given_name"
        elif key == "streetAddr":
            suggest = "street_addr"
        elif key == "dataObfuscated":
            suggest = "data_obfuscated"
        elif key == "extraParameters":
            suggest = "extra_parameters"
        elif key == "mailObfuscated":
            suggest = "mail_obfuscated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainOwner. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainOwner.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainOwner.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 city: str,
                 country: str,
                 email: str,
                 family_name: str,
                 given_name: str,
                 phone: str,
                 street_addr: str,
                 type: str,
                 zip: str,
                 data_obfuscated: Optional[bool] = None,
                 extra_parameters: Optional[Mapping[str, str]] = None,
                 mail_obfuscated: Optional[bool] = None,
                 organisation: Optional[str] = None,
                 state: Optional[str] = None):
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "family_name", family_name)
        pulumi.set(__self__, "given_name", given_name)
        pulumi.set(__self__, "phone", phone)
        pulumi.set(__self__, "street_addr", street_addr)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "zip", zip)
        if data_obfuscated is not None:
            pulumi.set(__self__, "data_obfuscated", data_obfuscated)
        if extra_parameters is not None:
            pulumi.set(__self__, "extra_parameters", extra_parameters)
        if mail_obfuscated is not None:
            pulumi.set(__self__, "mail_obfuscated", mail_obfuscated)
        if organisation is not None:
            pulumi.set(__self__, "organisation", organisation)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter
    def country(self) -> str:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="familyName")
    def family_name(self) -> str:
        return pulumi.get(self, "family_name")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> str:
        return pulumi.get(self, "given_name")

    @property
    @pulumi.getter
    def phone(self) -> str:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="streetAddr")
    def street_addr(self) -> str:
        return pulumi.get(self, "street_addr")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def zip(self) -> str:
        return pulumi.get(self, "zip")

    @property
    @pulumi.getter(name="dataObfuscated")
    def data_obfuscated(self) -> Optional[bool]:
        return pulumi.get(self, "data_obfuscated")

    @property
    @pulumi.getter(name="extraParameters")
    def extra_parameters(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "extra_parameters")

    @property
    @pulumi.getter(name="mailObfuscated")
    def mail_obfuscated(self) -> Optional[bool]:
        return pulumi.get(self, "mail_obfuscated")

    @property
    @pulumi.getter
    def organisation(self) -> Optional[str]:
        return pulumi.get(self, "organisation")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class DomainTech(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "familyName":
            suggest = "family_name"
        elif key == "givenName":
            suggest = "given_name"
        elif key == "streetAddr":
            suggest = "street_addr"
        elif key == "dataObfuscated":
            suggest = "data_obfuscated"
        elif key == "extraParameters":
            suggest = "extra_parameters"
        elif key == "mailObfuscated":
            suggest = "mail_obfuscated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainTech. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainTech.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainTech.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 city: str,
                 country: str,
                 email: str,
                 family_name: str,
                 given_name: str,
                 phone: str,
                 street_addr: str,
                 type: str,
                 zip: str,
                 data_obfuscated: Optional[bool] = None,
                 extra_parameters: Optional[Mapping[str, str]] = None,
                 mail_obfuscated: Optional[bool] = None,
                 organisation: Optional[str] = None,
                 state: Optional[str] = None):
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "family_name", family_name)
        pulumi.set(__self__, "given_name", given_name)
        pulumi.set(__self__, "phone", phone)
        pulumi.set(__self__, "street_addr", street_addr)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "zip", zip)
        if data_obfuscated is not None:
            pulumi.set(__self__, "data_obfuscated", data_obfuscated)
        if extra_parameters is not None:
            pulumi.set(__self__, "extra_parameters", extra_parameters)
        if mail_obfuscated is not None:
            pulumi.set(__self__, "mail_obfuscated", mail_obfuscated)
        if organisation is not None:
            pulumi.set(__self__, "organisation", organisation)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter
    def country(self) -> str:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="familyName")
    def family_name(self) -> str:
        return pulumi.get(self, "family_name")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> str:
        return pulumi.get(self, "given_name")

    @property
    @pulumi.getter
    def phone(self) -> str:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="streetAddr")
    def street_addr(self) -> str:
        return pulumi.get(self, "street_addr")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def zip(self) -> str:
        return pulumi.get(self, "zip")

    @property
    @pulumi.getter(name="dataObfuscated")
    def data_obfuscated(self) -> Optional[bool]:
        return pulumi.get(self, "data_obfuscated")

    @property
    @pulumi.getter(name="extraParameters")
    def extra_parameters(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "extra_parameters")

    @property
    @pulumi.getter(name="mailObfuscated")
    def mail_obfuscated(self) -> Optional[bool]:
        return pulumi.get(self, "mail_obfuscated")

    @property
    @pulumi.getter
    def organisation(self) -> Optional[str]:
        return pulumi.get(self, "organisation")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


