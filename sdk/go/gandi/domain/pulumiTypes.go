// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package domain

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DomainAdmin struct {
	City            string            `pulumi:"city"`
	Country         string            `pulumi:"country"`
	DataObfuscated  *bool             `pulumi:"dataObfuscated"`
	Email           string            `pulumi:"email"`
	ExtraParameters map[string]string `pulumi:"extraParameters"`
	FamilyName      string            `pulumi:"familyName"`
	GivenName       string            `pulumi:"givenName"`
	MailObfuscated  *bool             `pulumi:"mailObfuscated"`
	Organisation    *string           `pulumi:"organisation"`
	Phone           string            `pulumi:"phone"`
	State           *string           `pulumi:"state"`
	StreetAddr      string            `pulumi:"streetAddr"`
	Type            string            `pulumi:"type"`
	Zip             string            `pulumi:"zip"`
}

// DomainAdminInput is an input type that accepts DomainAdminArgs and DomainAdminOutput values.
// You can construct a concrete instance of `DomainAdminInput` via:
//
//          DomainAdminArgs{...}
type DomainAdminInput interface {
	pulumi.Input

	ToDomainAdminOutput() DomainAdminOutput
	ToDomainAdminOutputWithContext(context.Context) DomainAdminOutput
}

type DomainAdminArgs struct {
	City            pulumi.StringInput    `pulumi:"city"`
	Country         pulumi.StringInput    `pulumi:"country"`
	DataObfuscated  pulumi.BoolPtrInput   `pulumi:"dataObfuscated"`
	Email           pulumi.StringInput    `pulumi:"email"`
	ExtraParameters pulumi.StringMapInput `pulumi:"extraParameters"`
	FamilyName      pulumi.StringInput    `pulumi:"familyName"`
	GivenName       pulumi.StringInput    `pulumi:"givenName"`
	MailObfuscated  pulumi.BoolPtrInput   `pulumi:"mailObfuscated"`
	Organisation    pulumi.StringPtrInput `pulumi:"organisation"`
	Phone           pulumi.StringInput    `pulumi:"phone"`
	State           pulumi.StringPtrInput `pulumi:"state"`
	StreetAddr      pulumi.StringInput    `pulumi:"streetAddr"`
	Type            pulumi.StringInput    `pulumi:"type"`
	Zip             pulumi.StringInput    `pulumi:"zip"`
}

func (DomainAdminArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainAdmin)(nil)).Elem()
}

func (i DomainAdminArgs) ToDomainAdminOutput() DomainAdminOutput {
	return i.ToDomainAdminOutputWithContext(context.Background())
}

func (i DomainAdminArgs) ToDomainAdminOutputWithContext(ctx context.Context) DomainAdminOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainAdminOutput)
}

// DomainAdminArrayInput is an input type that accepts DomainAdminArray and DomainAdminArrayOutput values.
// You can construct a concrete instance of `DomainAdminArrayInput` via:
//
//          DomainAdminArray{ DomainAdminArgs{...} }
type DomainAdminArrayInput interface {
	pulumi.Input

	ToDomainAdminArrayOutput() DomainAdminArrayOutput
	ToDomainAdminArrayOutputWithContext(context.Context) DomainAdminArrayOutput
}

type DomainAdminArray []DomainAdminInput

func (DomainAdminArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainAdmin)(nil)).Elem()
}

func (i DomainAdminArray) ToDomainAdminArrayOutput() DomainAdminArrayOutput {
	return i.ToDomainAdminArrayOutputWithContext(context.Background())
}

func (i DomainAdminArray) ToDomainAdminArrayOutputWithContext(ctx context.Context) DomainAdminArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainAdminArrayOutput)
}

type DomainAdminOutput struct{ *pulumi.OutputState }

func (DomainAdminOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainAdmin)(nil)).Elem()
}

func (o DomainAdminOutput) ToDomainAdminOutput() DomainAdminOutput {
	return o
}

func (o DomainAdminOutput) ToDomainAdminOutputWithContext(ctx context.Context) DomainAdminOutput {
	return o
}

func (o DomainAdminOutput) City() pulumi.StringOutput {
	return o.ApplyT(func(v DomainAdmin) string { return v.City }).(pulumi.StringOutput)
}

func (o DomainAdminOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v DomainAdmin) string { return v.Country }).(pulumi.StringOutput)
}

func (o DomainAdminOutput) DataObfuscated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainAdmin) *bool { return v.DataObfuscated }).(pulumi.BoolPtrOutput)
}

func (o DomainAdminOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v DomainAdmin) string { return v.Email }).(pulumi.StringOutput)
}

func (o DomainAdminOutput) ExtraParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v DomainAdmin) map[string]string { return v.ExtraParameters }).(pulumi.StringMapOutput)
}

func (o DomainAdminOutput) FamilyName() pulumi.StringOutput {
	return o.ApplyT(func(v DomainAdmin) string { return v.FamilyName }).(pulumi.StringOutput)
}

func (o DomainAdminOutput) GivenName() pulumi.StringOutput {
	return o.ApplyT(func(v DomainAdmin) string { return v.GivenName }).(pulumi.StringOutput)
}

func (o DomainAdminOutput) MailObfuscated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainAdmin) *bool { return v.MailObfuscated }).(pulumi.BoolPtrOutput)
}

func (o DomainAdminOutput) Organisation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainAdmin) *string { return v.Organisation }).(pulumi.StringPtrOutput)
}

func (o DomainAdminOutput) Phone() pulumi.StringOutput {
	return o.ApplyT(func(v DomainAdmin) string { return v.Phone }).(pulumi.StringOutput)
}

func (o DomainAdminOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainAdmin) *string { return v.State }).(pulumi.StringPtrOutput)
}

func (o DomainAdminOutput) StreetAddr() pulumi.StringOutput {
	return o.ApplyT(func(v DomainAdmin) string { return v.StreetAddr }).(pulumi.StringOutput)
}

func (o DomainAdminOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DomainAdmin) string { return v.Type }).(pulumi.StringOutput)
}

func (o DomainAdminOutput) Zip() pulumi.StringOutput {
	return o.ApplyT(func(v DomainAdmin) string { return v.Zip }).(pulumi.StringOutput)
}

type DomainAdminArrayOutput struct{ *pulumi.OutputState }

func (DomainAdminArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainAdmin)(nil)).Elem()
}

func (o DomainAdminArrayOutput) ToDomainAdminArrayOutput() DomainAdminArrayOutput {
	return o
}

func (o DomainAdminArrayOutput) ToDomainAdminArrayOutputWithContext(ctx context.Context) DomainAdminArrayOutput {
	return o
}

func (o DomainAdminArrayOutput) Index(i pulumi.IntInput) DomainAdminOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainAdmin {
		return vs[0].([]DomainAdmin)[vs[1].(int)]
	}).(DomainAdminOutput)
}

type DomainBilling struct {
	City            string            `pulumi:"city"`
	Country         string            `pulumi:"country"`
	DataObfuscated  *bool             `pulumi:"dataObfuscated"`
	Email           string            `pulumi:"email"`
	ExtraParameters map[string]string `pulumi:"extraParameters"`
	FamilyName      string            `pulumi:"familyName"`
	GivenName       string            `pulumi:"givenName"`
	MailObfuscated  *bool             `pulumi:"mailObfuscated"`
	Organisation    *string           `pulumi:"organisation"`
	Phone           string            `pulumi:"phone"`
	State           *string           `pulumi:"state"`
	StreetAddr      string            `pulumi:"streetAddr"`
	Type            string            `pulumi:"type"`
	Zip             string            `pulumi:"zip"`
}

// DomainBillingInput is an input type that accepts DomainBillingArgs and DomainBillingOutput values.
// You can construct a concrete instance of `DomainBillingInput` via:
//
//          DomainBillingArgs{...}
type DomainBillingInput interface {
	pulumi.Input

	ToDomainBillingOutput() DomainBillingOutput
	ToDomainBillingOutputWithContext(context.Context) DomainBillingOutput
}

type DomainBillingArgs struct {
	City            pulumi.StringInput    `pulumi:"city"`
	Country         pulumi.StringInput    `pulumi:"country"`
	DataObfuscated  pulumi.BoolPtrInput   `pulumi:"dataObfuscated"`
	Email           pulumi.StringInput    `pulumi:"email"`
	ExtraParameters pulumi.StringMapInput `pulumi:"extraParameters"`
	FamilyName      pulumi.StringInput    `pulumi:"familyName"`
	GivenName       pulumi.StringInput    `pulumi:"givenName"`
	MailObfuscated  pulumi.BoolPtrInput   `pulumi:"mailObfuscated"`
	Organisation    pulumi.StringPtrInput `pulumi:"organisation"`
	Phone           pulumi.StringInput    `pulumi:"phone"`
	State           pulumi.StringPtrInput `pulumi:"state"`
	StreetAddr      pulumi.StringInput    `pulumi:"streetAddr"`
	Type            pulumi.StringInput    `pulumi:"type"`
	Zip             pulumi.StringInput    `pulumi:"zip"`
}

func (DomainBillingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainBilling)(nil)).Elem()
}

func (i DomainBillingArgs) ToDomainBillingOutput() DomainBillingOutput {
	return i.ToDomainBillingOutputWithContext(context.Background())
}

func (i DomainBillingArgs) ToDomainBillingOutputWithContext(ctx context.Context) DomainBillingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainBillingOutput)
}

// DomainBillingArrayInput is an input type that accepts DomainBillingArray and DomainBillingArrayOutput values.
// You can construct a concrete instance of `DomainBillingArrayInput` via:
//
//          DomainBillingArray{ DomainBillingArgs{...} }
type DomainBillingArrayInput interface {
	pulumi.Input

	ToDomainBillingArrayOutput() DomainBillingArrayOutput
	ToDomainBillingArrayOutputWithContext(context.Context) DomainBillingArrayOutput
}

type DomainBillingArray []DomainBillingInput

func (DomainBillingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainBilling)(nil)).Elem()
}

func (i DomainBillingArray) ToDomainBillingArrayOutput() DomainBillingArrayOutput {
	return i.ToDomainBillingArrayOutputWithContext(context.Background())
}

func (i DomainBillingArray) ToDomainBillingArrayOutputWithContext(ctx context.Context) DomainBillingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainBillingArrayOutput)
}

type DomainBillingOutput struct{ *pulumi.OutputState }

func (DomainBillingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainBilling)(nil)).Elem()
}

func (o DomainBillingOutput) ToDomainBillingOutput() DomainBillingOutput {
	return o
}

func (o DomainBillingOutput) ToDomainBillingOutputWithContext(ctx context.Context) DomainBillingOutput {
	return o
}

func (o DomainBillingOutput) City() pulumi.StringOutput {
	return o.ApplyT(func(v DomainBilling) string { return v.City }).(pulumi.StringOutput)
}

func (o DomainBillingOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v DomainBilling) string { return v.Country }).(pulumi.StringOutput)
}

func (o DomainBillingOutput) DataObfuscated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainBilling) *bool { return v.DataObfuscated }).(pulumi.BoolPtrOutput)
}

func (o DomainBillingOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v DomainBilling) string { return v.Email }).(pulumi.StringOutput)
}

func (o DomainBillingOutput) ExtraParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v DomainBilling) map[string]string { return v.ExtraParameters }).(pulumi.StringMapOutput)
}

func (o DomainBillingOutput) FamilyName() pulumi.StringOutput {
	return o.ApplyT(func(v DomainBilling) string { return v.FamilyName }).(pulumi.StringOutput)
}

func (o DomainBillingOutput) GivenName() pulumi.StringOutput {
	return o.ApplyT(func(v DomainBilling) string { return v.GivenName }).(pulumi.StringOutput)
}

func (o DomainBillingOutput) MailObfuscated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainBilling) *bool { return v.MailObfuscated }).(pulumi.BoolPtrOutput)
}

func (o DomainBillingOutput) Organisation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainBilling) *string { return v.Organisation }).(pulumi.StringPtrOutput)
}

func (o DomainBillingOutput) Phone() pulumi.StringOutput {
	return o.ApplyT(func(v DomainBilling) string { return v.Phone }).(pulumi.StringOutput)
}

func (o DomainBillingOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainBilling) *string { return v.State }).(pulumi.StringPtrOutput)
}

func (o DomainBillingOutput) StreetAddr() pulumi.StringOutput {
	return o.ApplyT(func(v DomainBilling) string { return v.StreetAddr }).(pulumi.StringOutput)
}

func (o DomainBillingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DomainBilling) string { return v.Type }).(pulumi.StringOutput)
}

func (o DomainBillingOutput) Zip() pulumi.StringOutput {
	return o.ApplyT(func(v DomainBilling) string { return v.Zip }).(pulumi.StringOutput)
}

type DomainBillingArrayOutput struct{ *pulumi.OutputState }

func (DomainBillingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainBilling)(nil)).Elem()
}

func (o DomainBillingArrayOutput) ToDomainBillingArrayOutput() DomainBillingArrayOutput {
	return o
}

func (o DomainBillingArrayOutput) ToDomainBillingArrayOutputWithContext(ctx context.Context) DomainBillingArrayOutput {
	return o
}

func (o DomainBillingArrayOutput) Index(i pulumi.IntInput) DomainBillingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainBilling {
		return vs[0].([]DomainBilling)[vs[1].(int)]
	}).(DomainBillingOutput)
}

type DomainOwner struct {
	City            string            `pulumi:"city"`
	Country         string            `pulumi:"country"`
	DataObfuscated  *bool             `pulumi:"dataObfuscated"`
	Email           string            `pulumi:"email"`
	ExtraParameters map[string]string `pulumi:"extraParameters"`
	FamilyName      string            `pulumi:"familyName"`
	GivenName       string            `pulumi:"givenName"`
	MailObfuscated  *bool             `pulumi:"mailObfuscated"`
	Organisation    *string           `pulumi:"organisation"`
	Phone           string            `pulumi:"phone"`
	State           *string           `pulumi:"state"`
	StreetAddr      string            `pulumi:"streetAddr"`
	Type            string            `pulumi:"type"`
	Zip             string            `pulumi:"zip"`
}

// DomainOwnerInput is an input type that accepts DomainOwnerArgs and DomainOwnerOutput values.
// You can construct a concrete instance of `DomainOwnerInput` via:
//
//          DomainOwnerArgs{...}
type DomainOwnerInput interface {
	pulumi.Input

	ToDomainOwnerOutput() DomainOwnerOutput
	ToDomainOwnerOutputWithContext(context.Context) DomainOwnerOutput
}

type DomainOwnerArgs struct {
	City            pulumi.StringInput    `pulumi:"city"`
	Country         pulumi.StringInput    `pulumi:"country"`
	DataObfuscated  pulumi.BoolPtrInput   `pulumi:"dataObfuscated"`
	Email           pulumi.StringInput    `pulumi:"email"`
	ExtraParameters pulumi.StringMapInput `pulumi:"extraParameters"`
	FamilyName      pulumi.StringInput    `pulumi:"familyName"`
	GivenName       pulumi.StringInput    `pulumi:"givenName"`
	MailObfuscated  pulumi.BoolPtrInput   `pulumi:"mailObfuscated"`
	Organisation    pulumi.StringPtrInput `pulumi:"organisation"`
	Phone           pulumi.StringInput    `pulumi:"phone"`
	State           pulumi.StringPtrInput `pulumi:"state"`
	StreetAddr      pulumi.StringInput    `pulumi:"streetAddr"`
	Type            pulumi.StringInput    `pulumi:"type"`
	Zip             pulumi.StringInput    `pulumi:"zip"`
}

func (DomainOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainOwner)(nil)).Elem()
}

func (i DomainOwnerArgs) ToDomainOwnerOutput() DomainOwnerOutput {
	return i.ToDomainOwnerOutputWithContext(context.Background())
}

func (i DomainOwnerArgs) ToDomainOwnerOutputWithContext(ctx context.Context) DomainOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainOwnerOutput)
}

// DomainOwnerArrayInput is an input type that accepts DomainOwnerArray and DomainOwnerArrayOutput values.
// You can construct a concrete instance of `DomainOwnerArrayInput` via:
//
//          DomainOwnerArray{ DomainOwnerArgs{...} }
type DomainOwnerArrayInput interface {
	pulumi.Input

	ToDomainOwnerArrayOutput() DomainOwnerArrayOutput
	ToDomainOwnerArrayOutputWithContext(context.Context) DomainOwnerArrayOutput
}

type DomainOwnerArray []DomainOwnerInput

func (DomainOwnerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainOwner)(nil)).Elem()
}

func (i DomainOwnerArray) ToDomainOwnerArrayOutput() DomainOwnerArrayOutput {
	return i.ToDomainOwnerArrayOutputWithContext(context.Background())
}

func (i DomainOwnerArray) ToDomainOwnerArrayOutputWithContext(ctx context.Context) DomainOwnerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainOwnerArrayOutput)
}

type DomainOwnerOutput struct{ *pulumi.OutputState }

func (DomainOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainOwner)(nil)).Elem()
}

func (o DomainOwnerOutput) ToDomainOwnerOutput() DomainOwnerOutput {
	return o
}

func (o DomainOwnerOutput) ToDomainOwnerOutputWithContext(ctx context.Context) DomainOwnerOutput {
	return o
}

func (o DomainOwnerOutput) City() pulumi.StringOutput {
	return o.ApplyT(func(v DomainOwner) string { return v.City }).(pulumi.StringOutput)
}

func (o DomainOwnerOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v DomainOwner) string { return v.Country }).(pulumi.StringOutput)
}

func (o DomainOwnerOutput) DataObfuscated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainOwner) *bool { return v.DataObfuscated }).(pulumi.BoolPtrOutput)
}

func (o DomainOwnerOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v DomainOwner) string { return v.Email }).(pulumi.StringOutput)
}

func (o DomainOwnerOutput) ExtraParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v DomainOwner) map[string]string { return v.ExtraParameters }).(pulumi.StringMapOutput)
}

func (o DomainOwnerOutput) FamilyName() pulumi.StringOutput {
	return o.ApplyT(func(v DomainOwner) string { return v.FamilyName }).(pulumi.StringOutput)
}

func (o DomainOwnerOutput) GivenName() pulumi.StringOutput {
	return o.ApplyT(func(v DomainOwner) string { return v.GivenName }).(pulumi.StringOutput)
}

func (o DomainOwnerOutput) MailObfuscated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainOwner) *bool { return v.MailObfuscated }).(pulumi.BoolPtrOutput)
}

func (o DomainOwnerOutput) Organisation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainOwner) *string { return v.Organisation }).(pulumi.StringPtrOutput)
}

func (o DomainOwnerOutput) Phone() pulumi.StringOutput {
	return o.ApplyT(func(v DomainOwner) string { return v.Phone }).(pulumi.StringOutput)
}

func (o DomainOwnerOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainOwner) *string { return v.State }).(pulumi.StringPtrOutput)
}

func (o DomainOwnerOutput) StreetAddr() pulumi.StringOutput {
	return o.ApplyT(func(v DomainOwner) string { return v.StreetAddr }).(pulumi.StringOutput)
}

func (o DomainOwnerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DomainOwner) string { return v.Type }).(pulumi.StringOutput)
}

func (o DomainOwnerOutput) Zip() pulumi.StringOutput {
	return o.ApplyT(func(v DomainOwner) string { return v.Zip }).(pulumi.StringOutput)
}

type DomainOwnerArrayOutput struct{ *pulumi.OutputState }

func (DomainOwnerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainOwner)(nil)).Elem()
}

func (o DomainOwnerArrayOutput) ToDomainOwnerArrayOutput() DomainOwnerArrayOutput {
	return o
}

func (o DomainOwnerArrayOutput) ToDomainOwnerArrayOutputWithContext(ctx context.Context) DomainOwnerArrayOutput {
	return o
}

func (o DomainOwnerArrayOutput) Index(i pulumi.IntInput) DomainOwnerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainOwner {
		return vs[0].([]DomainOwner)[vs[1].(int)]
	}).(DomainOwnerOutput)
}

type DomainTech struct {
	City            string            `pulumi:"city"`
	Country         string            `pulumi:"country"`
	DataObfuscated  *bool             `pulumi:"dataObfuscated"`
	Email           string            `pulumi:"email"`
	ExtraParameters map[string]string `pulumi:"extraParameters"`
	FamilyName      string            `pulumi:"familyName"`
	GivenName       string            `pulumi:"givenName"`
	MailObfuscated  *bool             `pulumi:"mailObfuscated"`
	Organisation    *string           `pulumi:"organisation"`
	Phone           string            `pulumi:"phone"`
	State           *string           `pulumi:"state"`
	StreetAddr      string            `pulumi:"streetAddr"`
	Type            string            `pulumi:"type"`
	Zip             string            `pulumi:"zip"`
}

// DomainTechInput is an input type that accepts DomainTechArgs and DomainTechOutput values.
// You can construct a concrete instance of `DomainTechInput` via:
//
//          DomainTechArgs{...}
type DomainTechInput interface {
	pulumi.Input

	ToDomainTechOutput() DomainTechOutput
	ToDomainTechOutputWithContext(context.Context) DomainTechOutput
}

type DomainTechArgs struct {
	City            pulumi.StringInput    `pulumi:"city"`
	Country         pulumi.StringInput    `pulumi:"country"`
	DataObfuscated  pulumi.BoolPtrInput   `pulumi:"dataObfuscated"`
	Email           pulumi.StringInput    `pulumi:"email"`
	ExtraParameters pulumi.StringMapInput `pulumi:"extraParameters"`
	FamilyName      pulumi.StringInput    `pulumi:"familyName"`
	GivenName       pulumi.StringInput    `pulumi:"givenName"`
	MailObfuscated  pulumi.BoolPtrInput   `pulumi:"mailObfuscated"`
	Organisation    pulumi.StringPtrInput `pulumi:"organisation"`
	Phone           pulumi.StringInput    `pulumi:"phone"`
	State           pulumi.StringPtrInput `pulumi:"state"`
	StreetAddr      pulumi.StringInput    `pulumi:"streetAddr"`
	Type            pulumi.StringInput    `pulumi:"type"`
	Zip             pulumi.StringInput    `pulumi:"zip"`
}

func (DomainTechArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainTech)(nil)).Elem()
}

func (i DomainTechArgs) ToDomainTechOutput() DomainTechOutput {
	return i.ToDomainTechOutputWithContext(context.Background())
}

func (i DomainTechArgs) ToDomainTechOutputWithContext(ctx context.Context) DomainTechOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainTechOutput)
}

// DomainTechArrayInput is an input type that accepts DomainTechArray and DomainTechArrayOutput values.
// You can construct a concrete instance of `DomainTechArrayInput` via:
//
//          DomainTechArray{ DomainTechArgs{...} }
type DomainTechArrayInput interface {
	pulumi.Input

	ToDomainTechArrayOutput() DomainTechArrayOutput
	ToDomainTechArrayOutputWithContext(context.Context) DomainTechArrayOutput
}

type DomainTechArray []DomainTechInput

func (DomainTechArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainTech)(nil)).Elem()
}

func (i DomainTechArray) ToDomainTechArrayOutput() DomainTechArrayOutput {
	return i.ToDomainTechArrayOutputWithContext(context.Background())
}

func (i DomainTechArray) ToDomainTechArrayOutputWithContext(ctx context.Context) DomainTechArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainTechArrayOutput)
}

type DomainTechOutput struct{ *pulumi.OutputState }

func (DomainTechOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainTech)(nil)).Elem()
}

func (o DomainTechOutput) ToDomainTechOutput() DomainTechOutput {
	return o
}

func (o DomainTechOutput) ToDomainTechOutputWithContext(ctx context.Context) DomainTechOutput {
	return o
}

func (o DomainTechOutput) City() pulumi.StringOutput {
	return o.ApplyT(func(v DomainTech) string { return v.City }).(pulumi.StringOutput)
}

func (o DomainTechOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v DomainTech) string { return v.Country }).(pulumi.StringOutput)
}

func (o DomainTechOutput) DataObfuscated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainTech) *bool { return v.DataObfuscated }).(pulumi.BoolPtrOutput)
}

func (o DomainTechOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v DomainTech) string { return v.Email }).(pulumi.StringOutput)
}

func (o DomainTechOutput) ExtraParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v DomainTech) map[string]string { return v.ExtraParameters }).(pulumi.StringMapOutput)
}

func (o DomainTechOutput) FamilyName() pulumi.StringOutput {
	return o.ApplyT(func(v DomainTech) string { return v.FamilyName }).(pulumi.StringOutput)
}

func (o DomainTechOutput) GivenName() pulumi.StringOutput {
	return o.ApplyT(func(v DomainTech) string { return v.GivenName }).(pulumi.StringOutput)
}

func (o DomainTechOutput) MailObfuscated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainTech) *bool { return v.MailObfuscated }).(pulumi.BoolPtrOutput)
}

func (o DomainTechOutput) Organisation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainTech) *string { return v.Organisation }).(pulumi.StringPtrOutput)
}

func (o DomainTechOutput) Phone() pulumi.StringOutput {
	return o.ApplyT(func(v DomainTech) string { return v.Phone }).(pulumi.StringOutput)
}

func (o DomainTechOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainTech) *string { return v.State }).(pulumi.StringPtrOutput)
}

func (o DomainTechOutput) StreetAddr() pulumi.StringOutput {
	return o.ApplyT(func(v DomainTech) string { return v.StreetAddr }).(pulumi.StringOutput)
}

func (o DomainTechOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DomainTech) string { return v.Type }).(pulumi.StringOutput)
}

func (o DomainTechOutput) Zip() pulumi.StringOutput {
	return o.ApplyT(func(v DomainTech) string { return v.Zip }).(pulumi.StringOutput)
}

type DomainTechArrayOutput struct{ *pulumi.OutputState }

func (DomainTechArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainTech)(nil)).Elem()
}

func (o DomainTechArrayOutput) ToDomainTechArrayOutput() DomainTechArrayOutput {
	return o
}

func (o DomainTechArrayOutput) ToDomainTechArrayOutputWithContext(ctx context.Context) DomainTechArrayOutput {
	return o
}

func (o DomainTechArrayOutput) Index(i pulumi.IntInput) DomainTechOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainTech {
		return vs[0].([]DomainTech)[vs[1].(int)]
	}).(DomainTechOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainAdminInput)(nil)).Elem(), DomainAdminArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainAdminArrayInput)(nil)).Elem(), DomainAdminArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainBillingInput)(nil)).Elem(), DomainBillingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainBillingArrayInput)(nil)).Elem(), DomainBillingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainOwnerInput)(nil)).Elem(), DomainOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainOwnerArrayInput)(nil)).Elem(), DomainOwnerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainTechInput)(nil)).Elem(), DomainTechArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainTechArrayInput)(nil)).Elem(), DomainTechArray{})
	pulumi.RegisterOutputType(DomainAdminOutput{})
	pulumi.RegisterOutputType(DomainAdminArrayOutput{})
	pulumi.RegisterOutputType(DomainBillingOutput{})
	pulumi.RegisterOutputType(DomainBillingArrayOutput{})
	pulumi.RegisterOutputType(DomainOwnerOutput{})
	pulumi.RegisterOutputType(DomainOwnerArrayOutput{})
	pulumi.RegisterOutputType(DomainTechOutput{})
	pulumi.RegisterOutputType(DomainTechArrayOutput{})
}
