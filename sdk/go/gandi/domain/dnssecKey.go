// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package domain

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DnssecKey struct {
	pulumi.CustomResourceState

	// DNSSEC algorithm type
	Algorithm pulumi.IntOutput `pulumi:"algorithm"`
	// Domain name
	Domain pulumi.StringOutput `pulumi:"domain"`
	// DNSSEC public key
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
	// DNSSEC key type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDnssecKey registers a new resource with the given unique name, arguments, and options.
func NewDnssecKey(ctx *pulumi.Context,
	name string, args *DnssecKeyArgs, opts ...pulumi.ResourceOption) (*DnssecKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Algorithm == nil {
		return nil, errors.New("invalid value for required argument 'Algorithm'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.PublicKey == nil {
		return nil, errors.New("invalid value for required argument 'PublicKey'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource DnssecKey
	err := ctx.RegisterResource("gandi:domain/dnssecKey:DnssecKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnssecKey gets an existing DnssecKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnssecKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnssecKeyState, opts ...pulumi.ResourceOption) (*DnssecKey, error) {
	var resource DnssecKey
	err := ctx.ReadResource("gandi:domain/dnssecKey:DnssecKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnssecKey resources.
type dnssecKeyState struct {
	// DNSSEC algorithm type
	Algorithm *int `pulumi:"algorithm"`
	// Domain name
	Domain *string `pulumi:"domain"`
	// DNSSEC public key
	PublicKey *string `pulumi:"publicKey"`
	// DNSSEC key type
	Type *string `pulumi:"type"`
}

type DnssecKeyState struct {
	// DNSSEC algorithm type
	Algorithm pulumi.IntPtrInput
	// Domain name
	Domain pulumi.StringPtrInput
	// DNSSEC public key
	PublicKey pulumi.StringPtrInput
	// DNSSEC key type
	Type pulumi.StringPtrInput
}

func (DnssecKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnssecKeyState)(nil)).Elem()
}

type dnssecKeyArgs struct {
	// DNSSEC algorithm type
	Algorithm int `pulumi:"algorithm"`
	// Domain name
	Domain string `pulumi:"domain"`
	// DNSSEC public key
	PublicKey string `pulumi:"publicKey"`
	// DNSSEC key type
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a DnssecKey resource.
type DnssecKeyArgs struct {
	// DNSSEC algorithm type
	Algorithm pulumi.IntInput
	// Domain name
	Domain pulumi.StringInput
	// DNSSEC public key
	PublicKey pulumi.StringInput
	// DNSSEC key type
	Type pulumi.StringInput
}

func (DnssecKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnssecKeyArgs)(nil)).Elem()
}

type DnssecKeyInput interface {
	pulumi.Input

	ToDnssecKeyOutput() DnssecKeyOutput
	ToDnssecKeyOutputWithContext(ctx context.Context) DnssecKeyOutput
}

func (*DnssecKey) ElementType() reflect.Type {
	return reflect.TypeOf((**DnssecKey)(nil)).Elem()
}

func (i *DnssecKey) ToDnssecKeyOutput() DnssecKeyOutput {
	return i.ToDnssecKeyOutputWithContext(context.Background())
}

func (i *DnssecKey) ToDnssecKeyOutputWithContext(ctx context.Context) DnssecKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnssecKeyOutput)
}

// DnssecKeyArrayInput is an input type that accepts DnssecKeyArray and DnssecKeyArrayOutput values.
// You can construct a concrete instance of `DnssecKeyArrayInput` via:
//
//          DnssecKeyArray{ DnssecKeyArgs{...} }
type DnssecKeyArrayInput interface {
	pulumi.Input

	ToDnssecKeyArrayOutput() DnssecKeyArrayOutput
	ToDnssecKeyArrayOutputWithContext(context.Context) DnssecKeyArrayOutput
}

type DnssecKeyArray []DnssecKeyInput

func (DnssecKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnssecKey)(nil)).Elem()
}

func (i DnssecKeyArray) ToDnssecKeyArrayOutput() DnssecKeyArrayOutput {
	return i.ToDnssecKeyArrayOutputWithContext(context.Background())
}

func (i DnssecKeyArray) ToDnssecKeyArrayOutputWithContext(ctx context.Context) DnssecKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnssecKeyArrayOutput)
}

// DnssecKeyMapInput is an input type that accepts DnssecKeyMap and DnssecKeyMapOutput values.
// You can construct a concrete instance of `DnssecKeyMapInput` via:
//
//          DnssecKeyMap{ "key": DnssecKeyArgs{...} }
type DnssecKeyMapInput interface {
	pulumi.Input

	ToDnssecKeyMapOutput() DnssecKeyMapOutput
	ToDnssecKeyMapOutputWithContext(context.Context) DnssecKeyMapOutput
}

type DnssecKeyMap map[string]DnssecKeyInput

func (DnssecKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnssecKey)(nil)).Elem()
}

func (i DnssecKeyMap) ToDnssecKeyMapOutput() DnssecKeyMapOutput {
	return i.ToDnssecKeyMapOutputWithContext(context.Background())
}

func (i DnssecKeyMap) ToDnssecKeyMapOutputWithContext(ctx context.Context) DnssecKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnssecKeyMapOutput)
}

type DnssecKeyOutput struct{ *pulumi.OutputState }

func (DnssecKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnssecKey)(nil)).Elem()
}

func (o DnssecKeyOutput) ToDnssecKeyOutput() DnssecKeyOutput {
	return o
}

func (o DnssecKeyOutput) ToDnssecKeyOutputWithContext(ctx context.Context) DnssecKeyOutput {
	return o
}

type DnssecKeyArrayOutput struct{ *pulumi.OutputState }

func (DnssecKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnssecKey)(nil)).Elem()
}

func (o DnssecKeyArrayOutput) ToDnssecKeyArrayOutput() DnssecKeyArrayOutput {
	return o
}

func (o DnssecKeyArrayOutput) ToDnssecKeyArrayOutputWithContext(ctx context.Context) DnssecKeyArrayOutput {
	return o
}

func (o DnssecKeyArrayOutput) Index(i pulumi.IntInput) DnssecKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DnssecKey {
		return vs[0].([]*DnssecKey)[vs[1].(int)]
	}).(DnssecKeyOutput)
}

type DnssecKeyMapOutput struct{ *pulumi.OutputState }

func (DnssecKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnssecKey)(nil)).Elem()
}

func (o DnssecKeyMapOutput) ToDnssecKeyMapOutput() DnssecKeyMapOutput {
	return o
}

func (o DnssecKeyMapOutput) ToDnssecKeyMapOutputWithContext(ctx context.Context) DnssecKeyMapOutput {
	return o
}

func (o DnssecKeyMapOutput) MapIndex(k pulumi.StringInput) DnssecKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DnssecKey {
		return vs[0].(map[string]*DnssecKey)[vs[1].(string)]
	}).(DnssecKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnssecKeyInput)(nil)).Elem(), &DnssecKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnssecKeyArrayInput)(nil)).Elem(), DnssecKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnssecKeyMapInput)(nil)).Elem(), DnssecKeyMap{})
	pulumi.RegisterOutputType(DnssecKeyOutput{})
	pulumi.RegisterOutputType(DnssecKeyArrayOutput{})
	pulumi.RegisterOutputType(DnssecKeyMapOutput{})
}
