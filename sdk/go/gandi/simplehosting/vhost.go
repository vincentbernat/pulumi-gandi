// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package simplehosting

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Vhost struct {
	pulumi.CustomResourceState

	// The name of an application to install ('grav', 'matomo', 'nextcloud', 'prestashop', 'wordpress')
	Application pulumi.StringPtrOutput `pulumi:"application"`
	// The ID of the created free certificate
	CertificateId pulumi.StringOutput `pulumi:"certificateId"`
	// The FQDN of the Vhost
	Fqdn pulumi.StringOutput `pulumi:"fqdn"`
	// The ID of the SimpleHosting instance
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Whether to alter the linked DNS Zone
	LinkedDnsZoneAlteration pulumi.BoolPtrOutput `pulumi:"linkedDnsZoneAlteration"`
}

// NewVhost registers a new resource with the given unique name, arguments, and options.
func NewVhost(ctx *pulumi.Context,
	name string, args *VhostArgs, opts ...pulumi.ResourceOption) (*Vhost, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Fqdn == nil {
		return nil, errors.New("invalid value for required argument 'Fqdn'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	var resource Vhost
	err := ctx.RegisterResource("gandi:simplehosting/vhost:Vhost", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVhost gets an existing Vhost resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVhost(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VhostState, opts ...pulumi.ResourceOption) (*Vhost, error) {
	var resource Vhost
	err := ctx.ReadResource("gandi:simplehosting/vhost:Vhost", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vhost resources.
type vhostState struct {
	// The name of an application to install ('grav', 'matomo', 'nextcloud', 'prestashop', 'wordpress')
	Application *string `pulumi:"application"`
	// The ID of the created free certificate
	CertificateId *string `pulumi:"certificateId"`
	// The FQDN of the Vhost
	Fqdn *string `pulumi:"fqdn"`
	// The ID of the SimpleHosting instance
	InstanceId *string `pulumi:"instanceId"`
	// Whether to alter the linked DNS Zone
	LinkedDnsZoneAlteration *bool `pulumi:"linkedDnsZoneAlteration"`
}

type VhostState struct {
	// The name of an application to install ('grav', 'matomo', 'nextcloud', 'prestashop', 'wordpress')
	Application pulumi.StringPtrInput
	// The ID of the created free certificate
	CertificateId pulumi.StringPtrInput
	// The FQDN of the Vhost
	Fqdn pulumi.StringPtrInput
	// The ID of the SimpleHosting instance
	InstanceId pulumi.StringPtrInput
	// Whether to alter the linked DNS Zone
	LinkedDnsZoneAlteration pulumi.BoolPtrInput
}

func (VhostState) ElementType() reflect.Type {
	return reflect.TypeOf((*vhostState)(nil)).Elem()
}

type vhostArgs struct {
	// The name of an application to install ('grav', 'matomo', 'nextcloud', 'prestashop', 'wordpress')
	Application *string `pulumi:"application"`
	// The FQDN of the Vhost
	Fqdn string `pulumi:"fqdn"`
	// The ID of the SimpleHosting instance
	InstanceId string `pulumi:"instanceId"`
	// Whether to alter the linked DNS Zone
	LinkedDnsZoneAlteration *bool `pulumi:"linkedDnsZoneAlteration"`
}

// The set of arguments for constructing a Vhost resource.
type VhostArgs struct {
	// The name of an application to install ('grav', 'matomo', 'nextcloud', 'prestashop', 'wordpress')
	Application pulumi.StringPtrInput
	// The FQDN of the Vhost
	Fqdn pulumi.StringInput
	// The ID of the SimpleHosting instance
	InstanceId pulumi.StringInput
	// Whether to alter the linked DNS Zone
	LinkedDnsZoneAlteration pulumi.BoolPtrInput
}

func (VhostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vhostArgs)(nil)).Elem()
}

type VhostInput interface {
	pulumi.Input

	ToVhostOutput() VhostOutput
	ToVhostOutputWithContext(ctx context.Context) VhostOutput
}

func (*Vhost) ElementType() reflect.Type {
	return reflect.TypeOf((**Vhost)(nil)).Elem()
}

func (i *Vhost) ToVhostOutput() VhostOutput {
	return i.ToVhostOutputWithContext(context.Background())
}

func (i *Vhost) ToVhostOutputWithContext(ctx context.Context) VhostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VhostOutput)
}

// VhostArrayInput is an input type that accepts VhostArray and VhostArrayOutput values.
// You can construct a concrete instance of `VhostArrayInput` via:
//
//          VhostArray{ VhostArgs{...} }
type VhostArrayInput interface {
	pulumi.Input

	ToVhostArrayOutput() VhostArrayOutput
	ToVhostArrayOutputWithContext(context.Context) VhostArrayOutput
}

type VhostArray []VhostInput

func (VhostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vhost)(nil)).Elem()
}

func (i VhostArray) ToVhostArrayOutput() VhostArrayOutput {
	return i.ToVhostArrayOutputWithContext(context.Background())
}

func (i VhostArray) ToVhostArrayOutputWithContext(ctx context.Context) VhostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VhostArrayOutput)
}

// VhostMapInput is an input type that accepts VhostMap and VhostMapOutput values.
// You can construct a concrete instance of `VhostMapInput` via:
//
//          VhostMap{ "key": VhostArgs{...} }
type VhostMapInput interface {
	pulumi.Input

	ToVhostMapOutput() VhostMapOutput
	ToVhostMapOutputWithContext(context.Context) VhostMapOutput
}

type VhostMap map[string]VhostInput

func (VhostMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vhost)(nil)).Elem()
}

func (i VhostMap) ToVhostMapOutput() VhostMapOutput {
	return i.ToVhostMapOutputWithContext(context.Background())
}

func (i VhostMap) ToVhostMapOutputWithContext(ctx context.Context) VhostMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VhostMapOutput)
}

type VhostOutput struct{ *pulumi.OutputState }

func (VhostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vhost)(nil)).Elem()
}

func (o VhostOutput) ToVhostOutput() VhostOutput {
	return o
}

func (o VhostOutput) ToVhostOutputWithContext(ctx context.Context) VhostOutput {
	return o
}

type VhostArrayOutput struct{ *pulumi.OutputState }

func (VhostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vhost)(nil)).Elem()
}

func (o VhostArrayOutput) ToVhostArrayOutput() VhostArrayOutput {
	return o
}

func (o VhostArrayOutput) ToVhostArrayOutputWithContext(ctx context.Context) VhostArrayOutput {
	return o
}

func (o VhostArrayOutput) Index(i pulumi.IntInput) VhostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vhost {
		return vs[0].([]*Vhost)[vs[1].(int)]
	}).(VhostOutput)
}

type VhostMapOutput struct{ *pulumi.OutputState }

func (VhostMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vhost)(nil)).Elem()
}

func (o VhostMapOutput) ToVhostMapOutput() VhostMapOutput {
	return o
}

func (o VhostMapOutput) ToVhostMapOutputWithContext(ctx context.Context) VhostMapOutput {
	return o
}

func (o VhostMapOutput) MapIndex(k pulumi.StringInput) VhostOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vhost {
		return vs[0].(map[string]*Vhost)[vs[1].(string)]
	}).(VhostOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VhostInput)(nil)).Elem(), &Vhost{})
	pulumi.RegisterInputType(reflect.TypeOf((*VhostArrayInput)(nil)).Elem(), VhostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VhostMapInput)(nil)).Elem(), VhostMap{})
	pulumi.RegisterOutputType(VhostOutput{})
	pulumi.RegisterOutputType(VhostArrayOutput{})
	pulumi.RegisterOutputType(VhostMapOutput{})
}
